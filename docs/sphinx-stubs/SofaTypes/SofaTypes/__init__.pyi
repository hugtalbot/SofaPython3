import SofaTypes.SofaTypes
import typing

__all__ = [
    "Mat1x1",
    "Mat2x2",
    "Mat3x3",
    "Mat3x4",
    "Mat4x4",
    "Quat",
    "Vec10d",
    "Vec10i",
    "Vec11d",
    "Vec11i",
    "Vec12d",
    "Vec12i",
    "Vec1d",
    "Vec1i",
    "Vec2d",
    "Vec2i",
    "Vec3d",
    "Vec3i",
    "Vec4d",
    "Vec4i",
    "Vec5d",
    "Vec5i",
    "Vec6d",
    "Vec6i",
    "Vec7d",
    "Vec7i",
    "Vec8d",
    "Vec8i",
    "Vec9d",
    "Vec9i"
]


class Mat1x1():
    @staticmethod
    def Identity() -> Mat1x1: ...
    def __add__(self, arg0: Mat1x1) -> Mat1x1: ...
    def __eq__(self, arg0: Mat1x1) -> bool: ...
    @staticmethod
    @typing.overload
    def __getitem__(*args, **kwargs) -> typing.Any: ...
    @typing.overload
    def __getitem__(self, arg0: int, arg1: int) -> float: ...
    def __iadd__(self, arg0: Mat1x1) -> None: ...
    def __imul__(self, arg0: float) -> None: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: Mat1x1) -> None: ...
    @typing.overload
    def __init__(self, arg0: list) -> None: ...
    def __isub__(self, arg0: Mat1x1) -> None: ...
    def __iter__(self) -> Mat1x1: ...
    def __itruediv__(self, arg0: float) -> None: ...
    @staticmethod
    @typing.overload
    def __mul__(*args, **kwargs) -> typing.Any: ...
    @typing.overload
    def __mul__(self, arg0: float) -> Mat1x1: ...
    def __ne__(self, arg0: Mat1x1) -> bool: ...
    def __neg__(self) -> Mat1x1: ...
    @staticmethod
    def __next__(*args, **kwargs) -> typing.Any: ...
    def __repr__(self) -> str: ...
    def __rmul__(self, arg0: float) -> Mat1x1: ...
    @staticmethod
    @typing.overload
    def __setitem__(*args, **kwargs) -> typing.Any: ...
    @typing.overload
    def __setitem__(self, arg0: int, arg1: int, arg2: float) -> float: ...
    def __str__(self) -> str: ...
    def __sub__(self, arg0: Mat1x1) -> Mat1x1: ...
    def __truediv__(self, arg0: float) -> Mat1x1: ...
    def addTransposed(self, arg0: Mat1x1) -> None: ...
    @staticmethod
    def canSelfTranspose(arg0: Mat1x1, arg1: Mat1x1) -> bool: ...
    def clear(self) -> None: ...
    @staticmethod
    def col(*args, **kwargs) -> typing.Any: ...
    def fill(self, r: float) -> None: ...
    def identity(self) -> None: ...
    def invert(self, arg0: Mat1x1) -> bool: ...
    def inverted(self) -> Mat1x1: ...
    def isDiagonal(self) -> bool: ...
    def isSymmetric(self) -> bool: ...
    def isTransform(self) -> bool: ...
    def minusTransposed(self, arg0: Mat1x1) -> Mat1x1: ...
    @staticmethod
    def multDiagonal(*args, **kwargs) -> typing.Any: ...
    def plusTransposed(self, arg0: Mat1x1) -> Mat1x1: ...
    @staticmethod
    def row(*args, **kwargs) -> typing.Any: ...
    def subTransposed(self, arg0: Mat1x1) -> None: ...
    @typing.overload
    def transpose(self) -> None: ...
    @typing.overload
    def transpose(self, m: Mat1x1) -> None: ...
    def transposed(self) -> Mat1x1: ...
    @property
    def cols(self) -> int:
        """
        :type: int
        """
    @property
    def rows(self) -> int:
        """
        :type: int
        """
    __hash__ = None
    pass
class Mat2x2():
    @staticmethod
    def Identity() -> Mat2x2: ...
    def __add__(self, arg0: Mat2x2) -> Mat2x2: ...
    def __eq__(self, arg0: Mat2x2) -> bool: ...
    @staticmethod
    @typing.overload
    def __getitem__(*args, **kwargs) -> typing.Any: ...
    @typing.overload
    def __getitem__(self, arg0: int, arg1: int) -> float: ...
    def __iadd__(self, arg0: Mat2x2) -> None: ...
    def __imul__(self, arg0: float) -> None: ...
    @staticmethod
    @typing.overload
    def __init__(*args, **kwargs) -> typing.Any: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: Mat2x2) -> None: ...
    @typing.overload
    def __init__(self, arg0: list) -> None: ...
    def __isub__(self, arg0: Mat2x2) -> None: ...
    def __iter__(self) -> Mat2x2: ...
    def __itruediv__(self, arg0: float) -> None: ...
    @staticmethod
    @typing.overload
    def __mul__(*args, **kwargs) -> typing.Any: ...
    @typing.overload
    def __mul__(self, arg0: float) -> Mat2x2: ...
    def __ne__(self, arg0: Mat2x2) -> bool: ...
    def __neg__(self) -> Mat2x2: ...
    @staticmethod
    def __next__(*args, **kwargs) -> typing.Any: ...
    def __repr__(self) -> str: ...
    def __rmul__(self, arg0: float) -> Mat2x2: ...
    @staticmethod
    @typing.overload
    def __setitem__(*args, **kwargs) -> typing.Any: ...
    @typing.overload
    def __setitem__(self, arg0: int, arg1: int, arg2: float) -> float: ...
    def __str__(self) -> str: ...
    def __sub__(self, arg0: Mat2x2) -> Mat2x2: ...
    def __truediv__(self, arg0: float) -> Mat2x2: ...
    def addTransposed(self, arg0: Mat2x2) -> None: ...
    @staticmethod
    def canSelfTranspose(arg0: Mat2x2, arg1: Mat2x2) -> bool: ...
    def clear(self) -> None: ...
    @staticmethod
    def col(*args, **kwargs) -> typing.Any: ...
    def fill(self, r: float) -> None: ...
    def identity(self) -> None: ...
    def invert(self, arg0: Mat2x2) -> bool: ...
    def inverted(self) -> Mat2x2: ...
    def isDiagonal(self) -> bool: ...
    def isSymmetric(self) -> bool: ...
    def isTransform(self) -> bool: ...
    def minusTransposed(self, arg0: Mat2x2) -> Mat2x2: ...
    @staticmethod
    def multDiagonal(*args, **kwargs) -> typing.Any: ...
    def plusTransposed(self, arg0: Mat2x2) -> Mat2x2: ...
    @staticmethod
    def row(*args, **kwargs) -> typing.Any: ...
    def subTransposed(self, arg0: Mat2x2) -> None: ...
    @typing.overload
    def transpose(self) -> None: ...
    @typing.overload
    def transpose(self, m: Mat2x2) -> None: ...
    def transposed(self) -> Mat2x2: ...
    @property
    def cols(self) -> int:
        """
        :type: int
        """
    @property
    def rows(self) -> int:
        """
        :type: int
        """
    __hash__ = None
    pass
class Mat3x3():
    @staticmethod
    def Identity() -> Mat3x3: ...
    def __add__(self, arg0: Mat3x3) -> Mat3x3: ...
    def __eq__(self, arg0: Mat3x3) -> bool: ...
    @staticmethod
    @typing.overload
    def __getitem__(*args, **kwargs) -> typing.Any: ...
    @typing.overload
    def __getitem__(self, arg0: int, arg1: int) -> float: ...
    def __iadd__(self, arg0: Mat3x3) -> None: ...
    def __imul__(self, arg0: float) -> None: ...
    @staticmethod
    @typing.overload
    def __init__(*args, **kwargs) -> typing.Any: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: Mat3x3) -> None: ...
    @typing.overload
    def __init__(self, arg0: list) -> None: ...
    def __isub__(self, arg0: Mat3x3) -> None: ...
    def __iter__(self) -> Mat3x3: ...
    def __itruediv__(self, arg0: float) -> None: ...
    @staticmethod
    @typing.overload
    def __mul__(*args, **kwargs) -> typing.Any: ...
    @typing.overload
    def __mul__(self, arg0: float) -> Mat3x3: ...
    def __ne__(self, arg0: Mat3x3) -> bool: ...
    def __neg__(self) -> Mat3x3: ...
    @staticmethod
    def __next__(*args, **kwargs) -> typing.Any: ...
    def __repr__(self) -> str: ...
    def __rmul__(self, arg0: float) -> Mat3x3: ...
    @staticmethod
    @typing.overload
    def __setitem__(*args, **kwargs) -> typing.Any: ...
    @typing.overload
    def __setitem__(self, arg0: int, arg1: int, arg2: float) -> float: ...
    def __str__(self) -> str: ...
    def __sub__(self, arg0: Mat3x3) -> Mat3x3: ...
    def __truediv__(self, arg0: float) -> Mat3x3: ...
    def addTransposed(self, arg0: Mat3x3) -> None: ...
    @staticmethod
    def canSelfTranspose(arg0: Mat3x3, arg1: Mat3x3) -> bool: ...
    def clear(self) -> None: ...
    @staticmethod
    def col(*args, **kwargs) -> typing.Any: ...
    def fill(self, r: float) -> None: ...
    def identity(self) -> None: ...
    def invert(self, arg0: Mat3x3) -> bool: ...
    def inverted(self) -> Mat3x3: ...
    def isDiagonal(self) -> bool: ...
    def isSymmetric(self) -> bool: ...
    def isTransform(self) -> bool: ...
    def minusTransposed(self, arg0: Mat3x3) -> Mat3x3: ...
    @staticmethod
    def multDiagonal(*args, **kwargs) -> typing.Any: ...
    def plusTransposed(self, arg0: Mat3x3) -> Mat3x3: ...
    @staticmethod
    def row(*args, **kwargs) -> typing.Any: ...
    def subTransposed(self, arg0: Mat3x3) -> None: ...
    @typing.overload
    def transpose(self) -> None: ...
    @typing.overload
    def transpose(self, m: Mat3x3) -> None: ...
    def transposed(self) -> Mat3x3: ...
    @property
    def cols(self) -> int:
        """
        :type: int
        """
    @property
    def rows(self) -> int:
        """
        :type: int
        """
    __hash__ = None
    pass
class Mat3x4():
    def __add__(self, arg0: Mat3x4) -> Mat3x4: ...
    def __eq__(self, arg0: Mat3x4) -> bool: ...
    @staticmethod
    @typing.overload
    def __getitem__(*args, **kwargs) -> typing.Any: ...
    @typing.overload
    def __getitem__(self, arg0: int, arg1: int) -> float: ...
    def __iadd__(self, arg0: Mat3x4) -> None: ...
    def __imul__(self, arg0: float) -> None: ...
    @staticmethod
    @typing.overload
    def __init__(*args, **kwargs) -> typing.Any: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: Mat3x4) -> None: ...
    @typing.overload
    def __init__(self, arg0: list) -> None: ...
    def __isub__(self, arg0: Mat3x4) -> None: ...
    def __iter__(self) -> Mat3x4: ...
    def __itruediv__(self, arg0: float) -> None: ...
    @staticmethod
    @typing.overload
    def __mul__(*args, **kwargs) -> typing.Any: ...
    @typing.overload
    def __mul__(self, arg0: float) -> Mat3x4: ...
    def __ne__(self, arg0: Mat3x4) -> bool: ...
    def __neg__(self) -> Mat3x4: ...
    @staticmethod
    def __next__(*args, **kwargs) -> typing.Any: ...
    def __repr__(self) -> str: ...
    def __rmul__(self, arg0: float) -> Mat3x4: ...
    @staticmethod
    @typing.overload
    def __setitem__(*args, **kwargs) -> typing.Any: ...
    @typing.overload
    def __setitem__(self, arg0: int, arg1: int, arg2: float) -> float: ...
    def __str__(self) -> str: ...
    def __sub__(self, arg0: Mat3x4) -> Mat3x4: ...
    def __truediv__(self, arg0: float) -> Mat3x4: ...
    @staticmethod
    def addTransposed(*args, **kwargs) -> typing.Any: ...
    @staticmethod
    def canSelfTranspose(*args, **kwargs) -> typing.Any: ...
    def clear(self) -> None: ...
    @staticmethod
    def col(*args, **kwargs) -> typing.Any: ...
    def fill(self, r: float) -> None: ...
    def isDiagonal(self) -> bool: ...
    def isSymmetric(self) -> bool: ...
    def isTransform(self) -> bool: ...
    @staticmethod
    def minusTransposed(*args, **kwargs) -> typing.Any: ...
    @staticmethod
    def multDiagonal(*args, **kwargs) -> typing.Any: ...
    @staticmethod
    def plusTransposed(*args, **kwargs) -> typing.Any: ...
    @staticmethod
    def row(*args, **kwargs) -> typing.Any: ...
    @staticmethod
    def subTransposed(*args, **kwargs) -> typing.Any: ...
    @staticmethod
    def transpose(*args, **kwargs) -> typing.Any: ...
    @staticmethod
    def transposed(*args, **kwargs) -> typing.Any: ...
    @property
    def cols(self) -> int:
        """
        :type: int
        """
    @property
    def rows(self) -> int:
        """
        :type: int
        """
    __hash__ = None
    pass
class Mat4x4():
    @staticmethod
    def Identity() -> Mat4x4: ...
    def __add__(self, arg0: Mat4x4) -> Mat4x4: ...
    def __eq__(self, arg0: Mat4x4) -> bool: ...
    @staticmethod
    @typing.overload
    def __getitem__(*args, **kwargs) -> typing.Any: ...
    @typing.overload
    def __getitem__(self, arg0: int, arg1: int) -> float: ...
    def __iadd__(self, arg0: Mat4x4) -> None: ...
    def __imul__(self, arg0: float) -> None: ...
    @staticmethod
    @typing.overload
    def __init__(*args, **kwargs) -> typing.Any: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: Mat4x4) -> None: ...
    @typing.overload
    def __init__(self, arg0: list) -> None: ...
    def __isub__(self, arg0: Mat4x4) -> None: ...
    def __iter__(self) -> Mat4x4: ...
    def __itruediv__(self, arg0: float) -> None: ...
    @staticmethod
    @typing.overload
    def __mul__(*args, **kwargs) -> typing.Any: ...
    @typing.overload
    def __mul__(self, arg0: float) -> Mat4x4: ...
    def __ne__(self, arg0: Mat4x4) -> bool: ...
    def __neg__(self) -> Mat4x4: ...
    @staticmethod
    def __next__(*args, **kwargs) -> typing.Any: ...
    def __repr__(self) -> str: ...
    def __rmul__(self, arg0: float) -> Mat4x4: ...
    @staticmethod
    @typing.overload
    def __setitem__(*args, **kwargs) -> typing.Any: ...
    @typing.overload
    def __setitem__(self, arg0: int, arg1: int, arg2: float) -> float: ...
    def __str__(self) -> str: ...
    def __sub__(self, arg0: Mat4x4) -> Mat4x4: ...
    def __truediv__(self, arg0: float) -> Mat4x4: ...
    def addTransposed(self, arg0: Mat4x4) -> None: ...
    @staticmethod
    def canSelfTranspose(arg0: Mat4x4, arg1: Mat4x4) -> bool: ...
    def clear(self) -> None: ...
    @staticmethod
    def col(*args, **kwargs) -> typing.Any: ...
    def fill(self, r: float) -> None: ...
    def identity(self) -> None: ...
    def invert(self, arg0: Mat4x4) -> bool: ...
    def inverted(self) -> Mat4x4: ...
    def isDiagonal(self) -> bool: ...
    def isSymmetric(self) -> bool: ...
    def isTransform(self) -> bool: ...
    def minusTransposed(self, arg0: Mat4x4) -> Mat4x4: ...
    @staticmethod
    def multDiagonal(*args, **kwargs) -> typing.Any: ...
    def plusTransposed(self, arg0: Mat4x4) -> Mat4x4: ...
    @staticmethod
    def row(*args, **kwargs) -> typing.Any: ...
    def subTransposed(self, arg0: Mat4x4) -> None: ...
    @typing.overload
    def transpose(self) -> None: ...
    @typing.overload
    def transpose(self, m: Mat4x4) -> None: ...
    def transposed(self) -> Mat4x4: ...
    @property
    def cols(self) -> int:
        """
        :type: int
        """
    @property
    def rows(self) -> int:
        """
        :type: int
        """
    __hash__ = None
    pass
class Quat():
    def __add__(self, arg0: Quat) -> Quat: ...
    def __eq__(self, arg0: Quat) -> bool: ...
    def __getitem__(self, arg0: int) -> float: ...
    def __iadd__(self, arg0: Quat) -> None: ...
    @typing.overload
    def __imul__(self, arg0: Quat) -> None: ...
    @typing.overload
    def __imul__(self, arg0: float) -> None: ...
    @staticmethod
    @typing.overload
    def __init__(*args, **kwargs) -> typing.Any: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: Quat) -> None: ...
    @typing.overload
    def __init__(self, arg0: list) -> None: ...
    @typing.overload
    def __init__(self, x: float, y: float, z: float, w: float) -> None: ...
    def __iter__(self) -> Quat: ...
    def __itruediv__(self, arg0: float) -> None: ...
    @typing.overload
    def __mul__(self, arg0: Quat) -> Quat: ...
    @typing.overload
    def __mul__(self, arg0: float) -> Quat: ...
    def __ne__(self, arg0: Quat) -> bool: ...
    def __next__(self) -> float: ...
    def __repr__(self) -> str: ...
    def __setitem__(self, arg0: int, arg1: float) -> float: ...
    def __str__(self) -> str: ...
    def __truediv__(self, arg0: float) -> Quat: ...
    @staticmethod
    def axisToQuat(*args, **kwargs) -> typing.Any: ...
    def buildRotationMatrix(self, arg0: Mat4x4) -> None: ...
    def clear(self) -> None: ...
    @staticmethod
    @typing.overload
    def createFromEuler(*args, **kwargs) -> typing.Any: ...
    @staticmethod
    @typing.overload
    def createFromEuler(arg0: float, arg1: float, arg2: float) -> None: ...
    @staticmethod
    def createFromFrame(*args, **kwargs) -> typing.Any: ...
    @staticmethod
    @typing.overload
    def createFromRotationVector(*args, **kwargs) -> typing.Any: ...
    @staticmethod
    @typing.overload
    def createFromRotationVector(arg0: float, arg1: float, arg2: float) -> None: ...
    @staticmethod
    def fromFrame(*args, **kwargs) -> typing.Any: ...
    def fromMatrix(self, m: Mat3x3) -> None: ...
    @staticmethod
    def identity() -> Quat: ...
    def inverse(self) -> Quat: ...
    @staticmethod
    def inverseRotate(*args, **kwargs) -> typing.Any: ...
    def normalize(self) -> None: ...
    @staticmethod
    def quatToAxis(*args, **kwargs) -> typing.Any: ...
    @staticmethod
    def rotate(*args, **kwargs) -> typing.Any: ...
    def set(self, x: float, y: float, z: float, w: float) -> None: ...
    @staticmethod
    def size() -> int: ...
    @typing.overload
    def slerp(self, a: Quat, b: Quat, t: float, allowdFlip: bool = True) -> None: ...
    @typing.overload
    def slerp(self, q1: Quat, t: float) -> Quat: ...
    def slerp2(self, q1: Quat, t: float) -> Quat: ...
    @staticmethod
    def toEulerVector(*args, **kwargs) -> typing.Any: ...
    def toMatrix(self, m: Mat3x3) -> None: ...
    @staticmethod
    def toRotationVector(*args, **kwargs) -> typing.Any: ...
    __hash__ = None
    pass
class Vec10d():
    def __add__(self, arg0: Vec10d) -> Vec10d: ...
    def __eq__(self, arg0: Vec10d) -> bool: ...
    def __getitem__(self, arg0: int) -> float: ...
    def __iadd__(self, arg0: Vec10d) -> None: ...
    @typing.overload
    def __idiv__(self, arg0: float) -> Vec10d: ...
    @typing.overload
    def __idiv__(self, arg0: int) -> Vec10d: ...
    @typing.overload
    def __imul__(self, arg0: float) -> Vec10d: ...
    @typing.overload
    def __imul__(self, arg0: int) -> Vec10d: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, *args) -> None: ...
    @typing.overload
    def __init__(self, arg0: Vec10d) -> None: ...
    def __isub__(self, arg0: Vec10d) -> None: ...
    def __iter__(self) -> Vec10d: ...
    @typing.overload
    def __mul__(self, arg0: Vec10d) -> float: ...
    @typing.overload
    def __mul__(self, arg0: float) -> Vec10d: ...
    @typing.overload
    def __mul__(self, arg0: int) -> Vec10d: ...
    @typing.overload
    def __mul__(self, arg0: Vec10d) -> Vec10d: ...
    @typing.overload
    def __mul__(self, arg0: Vec10d) -> Vec10d: ...
    def __ne__(self, arg0: Vec10d) -> bool: ...
    def __next__(self) -> float: ...
    def __repr__(self) -> str: ...
    def __setitem__(self, arg0: int, arg1: float) -> float: ...
    def __str__(self) -> str: ...
    def __sub__(self, arg0: Vec10d) -> Vec10d: ...
    @typing.overload
    def __truediv__(self, arg0: float) -> Vec10d: ...
    @typing.overload
    def __truediv__(self, arg0: int) -> Vec10d: ...
    def clear(self) -> None: ...
    def dot(self, arg0: Vec10d) -> float: ...
    def fill(self, r: float) -> None: ...
    def lNorm(self, l: int) -> float: ...
    def norm(self) -> float: ...
    def norm2(self) -> float: ...
    def normalize(self, threshold: float = 2.220446049250313e-16) -> bool: ...
    def normalized(self) -> Vec10d: ...
    @typing.overload
    def set(self, *args) -> None: ...
    @typing.overload
    def set(self, arg0: list) -> None: ...
    def sum(self) -> float: ...
    @property
    def w(self) -> float:
        """
        :type: float
        """
    @w.setter
    def w(self, arg1: float) -> None:
        pass
    @property
    def x(self) -> float:
        """
        :type: float
        """
    @x.setter
    def x(self, arg1: float) -> None:
        pass
    @property
    def xy(self) -> tuple:
        """
        :type: tuple
        """
    @xy.setter
    def xy(self, arg1: list) -> None:
        pass
    @property
    def xyz(self) -> tuple:
        """
        :type: tuple
        """
    @xyz.setter
    def xyz(self, arg1: list) -> None:
        pass
    @property
    def xyzw(self) -> tuple:
        """
        :type: tuple
        """
    @xyzw.setter
    def xyzw(self, arg1: list) -> None:
        pass
    @property
    def y(self) -> float:
        """
        :type: float
        """
    @y.setter
    def y(self, arg1: float) -> None:
        pass
    @property
    def z(self) -> float:
        """
        :type: float
        """
    @z.setter
    def z(self, arg1: float) -> None:
        pass
    __hash__ = None
    pass
class Vec10i():
    def __add__(self, arg0: Vec10i) -> Vec10i: ...
    def __eq__(self, arg0: Vec10i) -> bool: ...
    def __getitem__(self, arg0: int) -> int: ...
    def __iadd__(self, arg0: Vec10i) -> None: ...
    @typing.overload
    def __idiv__(self, arg0: float) -> Vec10i: ...
    @typing.overload
    def __idiv__(self, arg0: int) -> Vec10i: ...
    @typing.overload
    def __imul__(self, arg0: float) -> Vec10i: ...
    @typing.overload
    def __imul__(self, arg0: int) -> Vec10i: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, *args) -> None: ...
    @typing.overload
    def __init__(self, arg0: Vec10i) -> None: ...
    def __isub__(self, arg0: Vec10i) -> None: ...
    def __iter__(self) -> Vec10i: ...
    @typing.overload
    def __mul__(self, arg0: Vec10i) -> int: ...
    @typing.overload
    def __mul__(self, arg0: float) -> Vec10i: ...
    @typing.overload
    def __mul__(self, arg0: int) -> Vec10i: ...
    @typing.overload
    def __mul__(self, arg0: Vec10i) -> Vec10i: ...
    @typing.overload
    def __mul__(self, arg0: Vec10i) -> Vec10i: ...
    def __ne__(self, arg0: Vec10i) -> bool: ...
    def __next__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __setitem__(self, arg0: int, arg1: int) -> int: ...
    def __str__(self) -> str: ...
    def __sub__(self, arg0: Vec10i) -> Vec10i: ...
    @typing.overload
    def __truediv__(self, arg0: float) -> Vec10i: ...
    @typing.overload
    def __truediv__(self, arg0: int) -> Vec10i: ...
    def clear(self) -> None: ...
    def dot(self, arg0: Vec10i) -> int: ...
    def fill(self, r: int) -> None: ...
    def lNorm(self, l: int) -> int: ...
    def norm(self) -> int: ...
    def norm2(self) -> int: ...
    def normalize(self, threshold: int = 0) -> bool: ...
    def normalized(self) -> Vec10i: ...
    @typing.overload
    def set(self, *args) -> None: ...
    @typing.overload
    def set(self, arg0: list) -> None: ...
    def sum(self) -> int: ...
    @property
    def w(self) -> int:
        """
        :type: int
        """
    @w.setter
    def w(self, arg1: float) -> None:
        pass
    @property
    def x(self) -> int:
        """
        :type: int
        """
    @x.setter
    def x(self, arg1: float) -> None:
        pass
    @property
    def xy(self) -> tuple:
        """
        :type: tuple
        """
    @xy.setter
    def xy(self, arg1: list) -> None:
        pass
    @property
    def xyz(self) -> tuple:
        """
        :type: tuple
        """
    @xyz.setter
    def xyz(self, arg1: list) -> None:
        pass
    @property
    def xyzw(self) -> tuple:
        """
        :type: tuple
        """
    @xyzw.setter
    def xyzw(self, arg1: list) -> None:
        pass
    @property
    def y(self) -> int:
        """
        :type: int
        """
    @y.setter
    def y(self, arg1: float) -> None:
        pass
    @property
    def z(self) -> int:
        """
        :type: int
        """
    @z.setter
    def z(self, arg1: float) -> None:
        pass
    __hash__ = None
    pass
class Vec11d():
    def __add__(self, arg0: Vec11d) -> Vec11d: ...
    def __eq__(self, arg0: Vec11d) -> bool: ...
    def __getitem__(self, arg0: int) -> float: ...
    def __iadd__(self, arg0: Vec11d) -> None: ...
    @typing.overload
    def __idiv__(self, arg0: float) -> Vec11d: ...
    @typing.overload
    def __idiv__(self, arg0: int) -> Vec11d: ...
    @typing.overload
    def __imul__(self, arg0: float) -> Vec11d: ...
    @typing.overload
    def __imul__(self, arg0: int) -> Vec11d: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, *args) -> None: ...
    @typing.overload
    def __init__(self, arg0: Vec11d) -> None: ...
    def __isub__(self, arg0: Vec11d) -> None: ...
    def __iter__(self) -> Vec11d: ...
    @typing.overload
    def __mul__(self, arg0: Vec11d) -> float: ...
    @typing.overload
    def __mul__(self, arg0: float) -> Vec11d: ...
    @typing.overload
    def __mul__(self, arg0: int) -> Vec11d: ...
    @typing.overload
    def __mul__(self, arg0: Vec11d) -> Vec11d: ...
    @typing.overload
    def __mul__(self, arg0: Vec11d) -> Vec11d: ...
    def __ne__(self, arg0: Vec11d) -> bool: ...
    def __next__(self) -> float: ...
    def __repr__(self) -> str: ...
    def __setitem__(self, arg0: int, arg1: float) -> float: ...
    def __str__(self) -> str: ...
    def __sub__(self, arg0: Vec11d) -> Vec11d: ...
    @typing.overload
    def __truediv__(self, arg0: float) -> Vec11d: ...
    @typing.overload
    def __truediv__(self, arg0: int) -> Vec11d: ...
    def clear(self) -> None: ...
    def dot(self, arg0: Vec11d) -> float: ...
    def fill(self, r: float) -> None: ...
    def lNorm(self, l: int) -> float: ...
    def norm(self) -> float: ...
    def norm2(self) -> float: ...
    def normalize(self, threshold: float = 2.220446049250313e-16) -> bool: ...
    def normalized(self) -> Vec11d: ...
    @typing.overload
    def set(self, *args) -> None: ...
    @typing.overload
    def set(self, arg0: list) -> None: ...
    def sum(self) -> float: ...
    @property
    def w(self) -> float:
        """
        :type: float
        """
    @w.setter
    def w(self, arg1: float) -> None:
        pass
    @property
    def x(self) -> float:
        """
        :type: float
        """
    @x.setter
    def x(self, arg1: float) -> None:
        pass
    @property
    def xy(self) -> tuple:
        """
        :type: tuple
        """
    @xy.setter
    def xy(self, arg1: list) -> None:
        pass
    @property
    def xyz(self) -> tuple:
        """
        :type: tuple
        """
    @xyz.setter
    def xyz(self, arg1: list) -> None:
        pass
    @property
    def xyzw(self) -> tuple:
        """
        :type: tuple
        """
    @xyzw.setter
    def xyzw(self, arg1: list) -> None:
        pass
    @property
    def y(self) -> float:
        """
        :type: float
        """
    @y.setter
    def y(self, arg1: float) -> None:
        pass
    @property
    def z(self) -> float:
        """
        :type: float
        """
    @z.setter
    def z(self, arg1: float) -> None:
        pass
    __hash__ = None
    pass
class Vec11i():
    def __add__(self, arg0: Vec11i) -> Vec11i: ...
    def __eq__(self, arg0: Vec11i) -> bool: ...
    def __getitem__(self, arg0: int) -> int: ...
    def __iadd__(self, arg0: Vec11i) -> None: ...
    @typing.overload
    def __idiv__(self, arg0: float) -> Vec11i: ...
    @typing.overload
    def __idiv__(self, arg0: int) -> Vec11i: ...
    @typing.overload
    def __imul__(self, arg0: float) -> Vec11i: ...
    @typing.overload
    def __imul__(self, arg0: int) -> Vec11i: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, *args) -> None: ...
    @typing.overload
    def __init__(self, arg0: Vec11i) -> None: ...
    def __isub__(self, arg0: Vec11i) -> None: ...
    def __iter__(self) -> Vec11i: ...
    @typing.overload
    def __mul__(self, arg0: Vec11i) -> int: ...
    @typing.overload
    def __mul__(self, arg0: float) -> Vec11i: ...
    @typing.overload
    def __mul__(self, arg0: int) -> Vec11i: ...
    @typing.overload
    def __mul__(self, arg0: Vec11i) -> Vec11i: ...
    @typing.overload
    def __mul__(self, arg0: Vec11i) -> Vec11i: ...
    def __ne__(self, arg0: Vec11i) -> bool: ...
    def __next__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __setitem__(self, arg0: int, arg1: int) -> int: ...
    def __str__(self) -> str: ...
    def __sub__(self, arg0: Vec11i) -> Vec11i: ...
    @typing.overload
    def __truediv__(self, arg0: float) -> Vec11i: ...
    @typing.overload
    def __truediv__(self, arg0: int) -> Vec11i: ...
    def clear(self) -> None: ...
    def dot(self, arg0: Vec11i) -> int: ...
    def fill(self, r: int) -> None: ...
    def lNorm(self, l: int) -> int: ...
    def norm(self) -> int: ...
    def norm2(self) -> int: ...
    def normalize(self, threshold: int = 0) -> bool: ...
    def normalized(self) -> Vec11i: ...
    @typing.overload
    def set(self, *args) -> None: ...
    @typing.overload
    def set(self, arg0: list) -> None: ...
    def sum(self) -> int: ...
    @property
    def w(self) -> int:
        """
        :type: int
        """
    @w.setter
    def w(self, arg1: float) -> None:
        pass
    @property
    def x(self) -> int:
        """
        :type: int
        """
    @x.setter
    def x(self, arg1: float) -> None:
        pass
    @property
    def xy(self) -> tuple:
        """
        :type: tuple
        """
    @xy.setter
    def xy(self, arg1: list) -> None:
        pass
    @property
    def xyz(self) -> tuple:
        """
        :type: tuple
        """
    @xyz.setter
    def xyz(self, arg1: list) -> None:
        pass
    @property
    def xyzw(self) -> tuple:
        """
        :type: tuple
        """
    @xyzw.setter
    def xyzw(self, arg1: list) -> None:
        pass
    @property
    def y(self) -> int:
        """
        :type: int
        """
    @y.setter
    def y(self, arg1: float) -> None:
        pass
    @property
    def z(self) -> int:
        """
        :type: int
        """
    @z.setter
    def z(self, arg1: float) -> None:
        pass
    __hash__ = None
    pass
class Vec12d():
    def __add__(self, arg0: Vec12d) -> Vec12d: ...
    def __eq__(self, arg0: Vec12d) -> bool: ...
    def __getitem__(self, arg0: int) -> float: ...
    def __iadd__(self, arg0: Vec12d) -> None: ...
    @typing.overload
    def __idiv__(self, arg0: float) -> Vec12d: ...
    @typing.overload
    def __idiv__(self, arg0: int) -> Vec12d: ...
    @typing.overload
    def __imul__(self, arg0: float) -> Vec12d: ...
    @typing.overload
    def __imul__(self, arg0: int) -> Vec12d: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, *args) -> None: ...
    @typing.overload
    def __init__(self, arg0: Vec12d) -> None: ...
    def __isub__(self, arg0: Vec12d) -> None: ...
    def __iter__(self) -> Vec12d: ...
    @typing.overload
    def __mul__(self, arg0: Vec12d) -> float: ...
    @typing.overload
    def __mul__(self, arg0: float) -> Vec12d: ...
    @typing.overload
    def __mul__(self, arg0: int) -> Vec12d: ...
    @typing.overload
    def __mul__(self, arg0: Vec12d) -> Vec12d: ...
    @typing.overload
    def __mul__(self, arg0: Vec12d) -> Vec12d: ...
    def __ne__(self, arg0: Vec12d) -> bool: ...
    def __next__(self) -> float: ...
    def __repr__(self) -> str: ...
    def __setitem__(self, arg0: int, arg1: float) -> float: ...
    def __str__(self) -> str: ...
    def __sub__(self, arg0: Vec12d) -> Vec12d: ...
    @typing.overload
    def __truediv__(self, arg0: float) -> Vec12d: ...
    @typing.overload
    def __truediv__(self, arg0: int) -> Vec12d: ...
    def clear(self) -> None: ...
    def dot(self, arg0: Vec12d) -> float: ...
    def fill(self, r: float) -> None: ...
    def lNorm(self, l: int) -> float: ...
    def norm(self) -> float: ...
    def norm2(self) -> float: ...
    def normalize(self, threshold: float = 2.220446049250313e-16) -> bool: ...
    def normalized(self) -> Vec12d: ...
    @typing.overload
    def set(self, *args) -> None: ...
    @typing.overload
    def set(self, arg0: list) -> None: ...
    def sum(self) -> float: ...
    @property
    def w(self) -> float:
        """
        :type: float
        """
    @w.setter
    def w(self, arg1: float) -> None:
        pass
    @property
    def x(self) -> float:
        """
        :type: float
        """
    @x.setter
    def x(self, arg1: float) -> None:
        pass
    @property
    def xy(self) -> tuple:
        """
        :type: tuple
        """
    @xy.setter
    def xy(self, arg1: list) -> None:
        pass
    @property
    def xyz(self) -> tuple:
        """
        :type: tuple
        """
    @xyz.setter
    def xyz(self, arg1: list) -> None:
        pass
    @property
    def xyzw(self) -> tuple:
        """
        :type: tuple
        """
    @xyzw.setter
    def xyzw(self, arg1: list) -> None:
        pass
    @property
    def y(self) -> float:
        """
        :type: float
        """
    @y.setter
    def y(self, arg1: float) -> None:
        pass
    @property
    def z(self) -> float:
        """
        :type: float
        """
    @z.setter
    def z(self, arg1: float) -> None:
        pass
    __hash__ = None
    pass
class Vec12i():
    def __add__(self, arg0: Vec12i) -> Vec12i: ...
    def __eq__(self, arg0: Vec12i) -> bool: ...
    def __getitem__(self, arg0: int) -> int: ...
    def __iadd__(self, arg0: Vec12i) -> None: ...
    @typing.overload
    def __idiv__(self, arg0: float) -> Vec12i: ...
    @typing.overload
    def __idiv__(self, arg0: int) -> Vec12i: ...
    @typing.overload
    def __imul__(self, arg0: float) -> Vec12i: ...
    @typing.overload
    def __imul__(self, arg0: int) -> Vec12i: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, *args) -> None: ...
    @typing.overload
    def __init__(self, arg0: Vec12i) -> None: ...
    def __isub__(self, arg0: Vec12i) -> None: ...
    def __iter__(self) -> Vec12i: ...
    @typing.overload
    def __mul__(self, arg0: Vec12i) -> int: ...
    @typing.overload
    def __mul__(self, arg0: float) -> Vec12i: ...
    @typing.overload
    def __mul__(self, arg0: int) -> Vec12i: ...
    @typing.overload
    def __mul__(self, arg0: Vec12i) -> Vec12i: ...
    @typing.overload
    def __mul__(self, arg0: Vec12i) -> Vec12i: ...
    def __ne__(self, arg0: Vec12i) -> bool: ...
    def __next__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __setitem__(self, arg0: int, arg1: int) -> int: ...
    def __str__(self) -> str: ...
    def __sub__(self, arg0: Vec12i) -> Vec12i: ...
    @typing.overload
    def __truediv__(self, arg0: float) -> Vec12i: ...
    @typing.overload
    def __truediv__(self, arg0: int) -> Vec12i: ...
    def clear(self) -> None: ...
    def dot(self, arg0: Vec12i) -> int: ...
    def fill(self, r: int) -> None: ...
    def lNorm(self, l: int) -> int: ...
    def norm(self) -> int: ...
    def norm2(self) -> int: ...
    def normalize(self, threshold: int = 0) -> bool: ...
    def normalized(self) -> Vec12i: ...
    @typing.overload
    def set(self, *args) -> None: ...
    @typing.overload
    def set(self, arg0: list) -> None: ...
    def sum(self) -> int: ...
    @property
    def w(self) -> int:
        """
        :type: int
        """
    @w.setter
    def w(self, arg1: float) -> None:
        pass
    @property
    def x(self) -> int:
        """
        :type: int
        """
    @x.setter
    def x(self, arg1: float) -> None:
        pass
    @property
    def xy(self) -> tuple:
        """
        :type: tuple
        """
    @xy.setter
    def xy(self, arg1: list) -> None:
        pass
    @property
    def xyz(self) -> tuple:
        """
        :type: tuple
        """
    @xyz.setter
    def xyz(self, arg1: list) -> None:
        pass
    @property
    def xyzw(self) -> tuple:
        """
        :type: tuple
        """
    @xyzw.setter
    def xyzw(self, arg1: list) -> None:
        pass
    @property
    def y(self) -> int:
        """
        :type: int
        """
    @y.setter
    def y(self, arg1: float) -> None:
        pass
    @property
    def z(self) -> int:
        """
        :type: int
        """
    @z.setter
    def z(self, arg1: float) -> None:
        pass
    __hash__ = None
    pass
class Vec1d():
    def __add__(self, arg0: Vec1d) -> Vec1d: ...
    def __eq__(self, arg0: Vec1d) -> bool: ...
    def __getitem__(self, arg0: int) -> float: ...
    def __iadd__(self, arg0: Vec1d) -> None: ...
    @typing.overload
    def __idiv__(self, arg0: float) -> Vec1d: ...
    @typing.overload
    def __idiv__(self, arg0: int) -> Vec1d: ...
    @typing.overload
    def __imul__(self, arg0: float) -> Vec1d: ...
    @typing.overload
    def __imul__(self, arg0: int) -> Vec1d: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, *args) -> None: ...
    @typing.overload
    def __init__(self, arg0: Vec1d) -> None: ...
    def __isub__(self, arg0: Vec1d) -> None: ...
    def __iter__(self) -> Vec1d: ...
    @typing.overload
    def __mul__(self, arg0: Vec1d) -> float: ...
    @typing.overload
    def __mul__(self, arg0: float) -> Vec1d: ...
    @typing.overload
    def __mul__(self, arg0: int) -> Vec1d: ...
    @typing.overload
    def __mul__(self, arg0: Vec1d) -> Vec1d: ...
    @typing.overload
    def __mul__(self, arg0: Vec1d) -> Vec1d: ...
    def __ne__(self, arg0: Vec1d) -> bool: ...
    def __next__(self) -> float: ...
    def __repr__(self) -> str: ...
    def __setitem__(self, arg0: int, arg1: float) -> float: ...
    def __str__(self) -> str: ...
    def __sub__(self, arg0: Vec1d) -> Vec1d: ...
    @typing.overload
    def __truediv__(self, arg0: float) -> Vec1d: ...
    @typing.overload
    def __truediv__(self, arg0: int) -> Vec1d: ...
    def clear(self) -> None: ...
    def dot(self, arg0: Vec1d) -> float: ...
    def fill(self, r: float) -> None: ...
    def lNorm(self, l: int) -> float: ...
    def norm(self) -> float: ...
    def norm2(self) -> float: ...
    def normalize(self, threshold: float = 2.220446049250313e-16) -> bool: ...
    def normalized(self) -> Vec1d: ...
    @typing.overload
    def set(self, *args) -> None: ...
    @typing.overload
    def set(self, arg0: list) -> None: ...
    def sum(self) -> float: ...
    @property
    def x(self) -> float:
        """
        :type: float
        """
    @x.setter
    def x(self, arg1: float) -> None:
        pass
    __hash__ = None
    pass
class Vec1i():
    def __add__(self, arg0: Vec1i) -> Vec1i: ...
    def __eq__(self, arg0: Vec1i) -> bool: ...
    def __getitem__(self, arg0: int) -> int: ...
    def __iadd__(self, arg0: Vec1i) -> None: ...
    @typing.overload
    def __idiv__(self, arg0: float) -> Vec1i: ...
    @typing.overload
    def __idiv__(self, arg0: int) -> Vec1i: ...
    @typing.overload
    def __imul__(self, arg0: float) -> Vec1i: ...
    @typing.overload
    def __imul__(self, arg0: int) -> Vec1i: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, *args) -> None: ...
    @typing.overload
    def __init__(self, arg0: Vec1i) -> None: ...
    def __isub__(self, arg0: Vec1i) -> None: ...
    def __iter__(self) -> Vec1i: ...
    @typing.overload
    def __mul__(self, arg0: Vec1i) -> int: ...
    @typing.overload
    def __mul__(self, arg0: float) -> Vec1i: ...
    @typing.overload
    def __mul__(self, arg0: int) -> Vec1i: ...
    @typing.overload
    def __mul__(self, arg0: Vec1i) -> Vec1i: ...
    @typing.overload
    def __mul__(self, arg0: Vec1i) -> Vec1i: ...
    def __ne__(self, arg0: Vec1i) -> bool: ...
    def __next__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __setitem__(self, arg0: int, arg1: int) -> int: ...
    def __str__(self) -> str: ...
    def __sub__(self, arg0: Vec1i) -> Vec1i: ...
    @typing.overload
    def __truediv__(self, arg0: float) -> Vec1i: ...
    @typing.overload
    def __truediv__(self, arg0: int) -> Vec1i: ...
    def clear(self) -> None: ...
    def dot(self, arg0: Vec1i) -> int: ...
    def fill(self, r: int) -> None: ...
    def lNorm(self, l: int) -> int: ...
    def norm(self) -> int: ...
    def norm2(self) -> int: ...
    def normalize(self, threshold: int = 0) -> bool: ...
    def normalized(self) -> Vec1i: ...
    @typing.overload
    def set(self, *args) -> None: ...
    @typing.overload
    def set(self, arg0: list) -> None: ...
    def sum(self) -> int: ...
    @property
    def x(self) -> int:
        """
        :type: int
        """
    @x.setter
    def x(self, arg1: float) -> None:
        pass
    __hash__ = None
    pass
class Vec2d():
    def __add__(self, arg0: Vec2d) -> Vec2d: ...
    def __eq__(self, arg0: Vec2d) -> bool: ...
    def __getitem__(self, arg0: int) -> float: ...
    def __iadd__(self, arg0: Vec2d) -> None: ...
    @typing.overload
    def __idiv__(self, arg0: float) -> Vec2d: ...
    @typing.overload
    def __idiv__(self, arg0: int) -> Vec2d: ...
    @typing.overload
    def __imul__(self, arg0: float) -> Vec2d: ...
    @typing.overload
    def __imul__(self, arg0: int) -> Vec2d: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, *args) -> None: ...
    @typing.overload
    def __init__(self, arg0: Vec2d) -> None: ...
    def __isub__(self, arg0: Vec2d) -> None: ...
    def __iter__(self) -> Vec2d: ...
    @typing.overload
    def __mul__(self, arg0: Vec2d) -> float: ...
    @typing.overload
    def __mul__(self, arg0: float) -> Vec2d: ...
    @typing.overload
    def __mul__(self, arg0: int) -> Vec2d: ...
    @typing.overload
    def __mul__(self, arg0: Vec2d) -> Vec2d: ...
    @typing.overload
    def __mul__(self, arg0: Vec2d) -> Vec2d: ...
    def __ne__(self, arg0: Vec2d) -> bool: ...
    def __next__(self) -> float: ...
    def __repr__(self) -> str: ...
    def __setitem__(self, arg0: int, arg1: float) -> float: ...
    def __str__(self) -> str: ...
    def __sub__(self, arg0: Vec2d) -> Vec2d: ...
    @typing.overload
    def __truediv__(self, arg0: float) -> Vec2d: ...
    @typing.overload
    def __truediv__(self, arg0: int) -> Vec2d: ...
    def clear(self) -> None: ...
    def cross(self, arg0: Vec2d) -> float: ...
    def dot(self, arg0: Vec2d) -> float: ...
    def fill(self, r: float) -> None: ...
    def lNorm(self, l: int) -> float: ...
    def norm(self) -> float: ...
    def norm2(self) -> float: ...
    def normalize(self, threshold: float = 2.220446049250313e-16) -> bool: ...
    def normalized(self) -> Vec2d: ...
    @typing.overload
    def set(self, *args) -> None: ...
    @typing.overload
    def set(self, arg0: list) -> None: ...
    def sum(self) -> float: ...
    @property
    def x(self) -> float:
        """
        :type: float
        """
    @x.setter
    def x(self, arg1: float) -> None:
        pass
    @property
    def xy(self) -> tuple:
        """
        :type: tuple
        """
    @xy.setter
    def xy(self, arg1: list) -> None:
        pass
    @property
    def y(self) -> float:
        """
        :type: float
        """
    @y.setter
    def y(self, arg1: float) -> None:
        pass
    __hash__ = None
    pass
class Vec2i():
    def __add__(self, arg0: Vec2i) -> Vec2i: ...
    def __eq__(self, arg0: Vec2i) -> bool: ...
    def __getitem__(self, arg0: int) -> int: ...
    def __iadd__(self, arg0: Vec2i) -> None: ...
    @typing.overload
    def __idiv__(self, arg0: float) -> Vec2i: ...
    @typing.overload
    def __idiv__(self, arg0: int) -> Vec2i: ...
    @typing.overload
    def __imul__(self, arg0: float) -> Vec2i: ...
    @typing.overload
    def __imul__(self, arg0: int) -> Vec2i: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, *args) -> None: ...
    @typing.overload
    def __init__(self, arg0: Vec2i) -> None: ...
    def __isub__(self, arg0: Vec2i) -> None: ...
    def __iter__(self) -> Vec2i: ...
    @typing.overload
    def __mul__(self, arg0: Vec2i) -> int: ...
    @typing.overload
    def __mul__(self, arg0: float) -> Vec2i: ...
    @typing.overload
    def __mul__(self, arg0: int) -> Vec2i: ...
    @typing.overload
    def __mul__(self, arg0: Vec2i) -> Vec2i: ...
    @typing.overload
    def __mul__(self, arg0: Vec2i) -> Vec2i: ...
    def __ne__(self, arg0: Vec2i) -> bool: ...
    def __next__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __setitem__(self, arg0: int, arg1: int) -> int: ...
    def __str__(self) -> str: ...
    def __sub__(self, arg0: Vec2i) -> Vec2i: ...
    @typing.overload
    def __truediv__(self, arg0: float) -> Vec2i: ...
    @typing.overload
    def __truediv__(self, arg0: int) -> Vec2i: ...
    def clear(self) -> None: ...
    def cross(self, arg0: Vec2i) -> int: ...
    def dot(self, arg0: Vec2i) -> int: ...
    def fill(self, r: int) -> None: ...
    def lNorm(self, l: int) -> int: ...
    def norm(self) -> int: ...
    def norm2(self) -> int: ...
    def normalize(self, threshold: int = 0) -> bool: ...
    def normalized(self) -> Vec2i: ...
    @typing.overload
    def set(self, *args) -> None: ...
    @typing.overload
    def set(self, arg0: list) -> None: ...
    def sum(self) -> int: ...
    @property
    def x(self) -> int:
        """
        :type: int
        """
    @x.setter
    def x(self, arg1: float) -> None:
        pass
    @property
    def xy(self) -> tuple:
        """
        :type: tuple
        """
    @xy.setter
    def xy(self, arg1: list) -> None:
        pass
    @property
    def y(self) -> int:
        """
        :type: int
        """
    @y.setter
    def y(self, arg1: float) -> None:
        pass
    __hash__ = None
    pass
class Vec3d():
    def __add__(self, arg0: Vec3d) -> Vec3d: ...
    def __eq__(self, arg0: Vec3d) -> bool: ...
    def __getitem__(self, arg0: int) -> float: ...
    def __iadd__(self, arg0: Vec3d) -> None: ...
    @typing.overload
    def __idiv__(self, arg0: float) -> Vec3d: ...
    @typing.overload
    def __idiv__(self, arg0: int) -> Vec3d: ...
    @typing.overload
    def __imul__(self, arg0: float) -> Vec3d: ...
    @typing.overload
    def __imul__(self, arg0: int) -> Vec3d: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, *args) -> None: ...
    @typing.overload
    def __init__(self, arg0: Vec3d) -> None: ...
    def __isub__(self, arg0: Vec3d) -> None: ...
    def __iter__(self) -> Vec3d: ...
    @typing.overload
    def __mul__(self, arg0: Vec3d) -> float: ...
    @typing.overload
    def __mul__(self, arg0: float) -> Vec3d: ...
    @typing.overload
    def __mul__(self, arg0: int) -> Vec3d: ...
    @typing.overload
    def __mul__(self, arg0: Vec3d) -> Vec3d: ...
    @typing.overload
    def __mul__(self, arg0: Vec3d) -> Vec3d: ...
    def __ne__(self, arg0: Vec3d) -> bool: ...
    def __next__(self) -> float: ...
    def __repr__(self) -> str: ...
    def __setitem__(self, arg0: int, arg1: float) -> float: ...
    def __str__(self) -> str: ...
    def __sub__(self, arg0: Vec3d) -> Vec3d: ...
    @typing.overload
    def __truediv__(self, arg0: float) -> Vec3d: ...
    @typing.overload
    def __truediv__(self, arg0: int) -> Vec3d: ...
    def clear(self) -> None: ...
    def cross(self, arg0: Vec3d) -> Vec3d: ...
    def dot(self, arg0: Vec3d) -> float: ...
    def fill(self, r: float) -> None: ...
    def lNorm(self, l: int) -> float: ...
    def norm(self) -> float: ...
    def norm2(self) -> float: ...
    def normalize(self, threshold: float = 2.220446049250313e-16) -> bool: ...
    def normalized(self) -> Vec3d: ...
    @typing.overload
    def set(self, *args) -> None: ...
    @typing.overload
    def set(self, arg0: list) -> None: ...
    def sum(self) -> float: ...
    @property
    def x(self) -> float:
        """
        :type: float
        """
    @x.setter
    def x(self, arg1: float) -> None:
        pass
    @property
    def xy(self) -> tuple:
        """
        :type: tuple
        """
    @xy.setter
    def xy(self, arg1: list) -> None:
        pass
    @property
    def xyz(self) -> tuple:
        """
        :type: tuple
        """
    @xyz.setter
    def xyz(self, arg1: list) -> None:
        pass
    @property
    def y(self) -> float:
        """
        :type: float
        """
    @y.setter
    def y(self, arg1: float) -> None:
        pass
    @property
    def z(self) -> float:
        """
        :type: float
        """
    @z.setter
    def z(self, arg1: float) -> None:
        pass
    __hash__ = None
    pass
class Vec3i():
    def __add__(self, arg0: Vec3i) -> Vec3i: ...
    def __eq__(self, arg0: Vec3i) -> bool: ...
    def __getitem__(self, arg0: int) -> int: ...
    def __iadd__(self, arg0: Vec3i) -> None: ...
    @typing.overload
    def __idiv__(self, arg0: float) -> Vec3i: ...
    @typing.overload
    def __idiv__(self, arg0: int) -> Vec3i: ...
    @typing.overload
    def __imul__(self, arg0: float) -> Vec3i: ...
    @typing.overload
    def __imul__(self, arg0: int) -> Vec3i: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, *args) -> None: ...
    @typing.overload
    def __init__(self, arg0: Vec3i) -> None: ...
    def __isub__(self, arg0: Vec3i) -> None: ...
    def __iter__(self) -> Vec3i: ...
    @typing.overload
    def __mul__(self, arg0: Vec3i) -> int: ...
    @typing.overload
    def __mul__(self, arg0: float) -> Vec3i: ...
    @typing.overload
    def __mul__(self, arg0: int) -> Vec3i: ...
    @typing.overload
    def __mul__(self, arg0: Vec3i) -> Vec3i: ...
    @typing.overload
    def __mul__(self, arg0: Vec3i) -> Vec3i: ...
    def __ne__(self, arg0: Vec3i) -> bool: ...
    def __next__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __setitem__(self, arg0: int, arg1: int) -> int: ...
    def __str__(self) -> str: ...
    def __sub__(self, arg0: Vec3i) -> Vec3i: ...
    @typing.overload
    def __truediv__(self, arg0: float) -> Vec3i: ...
    @typing.overload
    def __truediv__(self, arg0: int) -> Vec3i: ...
    def clear(self) -> None: ...
    def cross(self, arg0: Vec3i) -> Vec3i: ...
    def dot(self, arg0: Vec3i) -> int: ...
    def fill(self, r: int) -> None: ...
    def lNorm(self, l: int) -> int: ...
    def norm(self) -> int: ...
    def norm2(self) -> int: ...
    def normalize(self, threshold: int = 0) -> bool: ...
    def normalized(self) -> Vec3i: ...
    @typing.overload
    def set(self, *args) -> None: ...
    @typing.overload
    def set(self, arg0: list) -> None: ...
    def sum(self) -> int: ...
    @property
    def x(self) -> int:
        """
        :type: int
        """
    @x.setter
    def x(self, arg1: float) -> None:
        pass
    @property
    def xy(self) -> tuple:
        """
        :type: tuple
        """
    @xy.setter
    def xy(self, arg1: list) -> None:
        pass
    @property
    def xyz(self) -> tuple:
        """
        :type: tuple
        """
    @xyz.setter
    def xyz(self, arg1: list) -> None:
        pass
    @property
    def y(self) -> int:
        """
        :type: int
        """
    @y.setter
    def y(self, arg1: float) -> None:
        pass
    @property
    def z(self) -> int:
        """
        :type: int
        """
    @z.setter
    def z(self, arg1: float) -> None:
        pass
    __hash__ = None
    pass
class Vec4d():
    def __add__(self, arg0: Vec4d) -> Vec4d: ...
    def __eq__(self, arg0: Vec4d) -> bool: ...
    def __getitem__(self, arg0: int) -> float: ...
    def __iadd__(self, arg0: Vec4d) -> None: ...
    @typing.overload
    def __idiv__(self, arg0: float) -> Vec4d: ...
    @typing.overload
    def __idiv__(self, arg0: int) -> Vec4d: ...
    @typing.overload
    def __imul__(self, arg0: float) -> Vec4d: ...
    @typing.overload
    def __imul__(self, arg0: int) -> Vec4d: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, *args) -> None: ...
    @typing.overload
    def __init__(self, arg0: Vec4d) -> None: ...
    def __isub__(self, arg0: Vec4d) -> None: ...
    def __iter__(self) -> Vec4d: ...
    @typing.overload
    def __mul__(self, arg0: Vec4d) -> float: ...
    @typing.overload
    def __mul__(self, arg0: float) -> Vec4d: ...
    @typing.overload
    def __mul__(self, arg0: int) -> Vec4d: ...
    @typing.overload
    def __mul__(self, arg0: Vec4d) -> Vec4d: ...
    @typing.overload
    def __mul__(self, arg0: Vec4d) -> Vec4d: ...
    def __ne__(self, arg0: Vec4d) -> bool: ...
    def __next__(self) -> float: ...
    def __repr__(self) -> str: ...
    def __setitem__(self, arg0: int, arg1: float) -> float: ...
    def __str__(self) -> str: ...
    def __sub__(self, arg0: Vec4d) -> Vec4d: ...
    @typing.overload
    def __truediv__(self, arg0: float) -> Vec4d: ...
    @typing.overload
    def __truediv__(self, arg0: int) -> Vec4d: ...
    def clear(self) -> None: ...
    def dot(self, arg0: Vec4d) -> float: ...
    def fill(self, r: float) -> None: ...
    def lNorm(self, l: int) -> float: ...
    def norm(self) -> float: ...
    def norm2(self) -> float: ...
    def normalize(self, threshold: float = 2.220446049250313e-16) -> bool: ...
    def normalized(self) -> Vec4d: ...
    @typing.overload
    def set(self, *args) -> None: ...
    @typing.overload
    def set(self, arg0: list) -> None: ...
    def sum(self) -> float: ...
    @property
    def w(self) -> float:
        """
        :type: float
        """
    @w.setter
    def w(self, arg1: float) -> None:
        pass
    @property
    def x(self) -> float:
        """
        :type: float
        """
    @x.setter
    def x(self, arg1: float) -> None:
        pass
    @property
    def xy(self) -> tuple:
        """
        :type: tuple
        """
    @xy.setter
    def xy(self, arg1: list) -> None:
        pass
    @property
    def xyz(self) -> tuple:
        """
        :type: tuple
        """
    @xyz.setter
    def xyz(self, arg1: list) -> None:
        pass
    @property
    def xyzw(self) -> tuple:
        """
        :type: tuple
        """
    @xyzw.setter
    def xyzw(self, arg1: list) -> None:
        pass
    @property
    def y(self) -> float:
        """
        :type: float
        """
    @y.setter
    def y(self, arg1: float) -> None:
        pass
    @property
    def z(self) -> float:
        """
        :type: float
        """
    @z.setter
    def z(self, arg1: float) -> None:
        pass
    __hash__ = None
    pass
class Vec4i():
    def __add__(self, arg0: Vec4i) -> Vec4i: ...
    def __eq__(self, arg0: Vec4i) -> bool: ...
    def __getitem__(self, arg0: int) -> int: ...
    def __iadd__(self, arg0: Vec4i) -> None: ...
    @typing.overload
    def __idiv__(self, arg0: float) -> Vec4i: ...
    @typing.overload
    def __idiv__(self, arg0: int) -> Vec4i: ...
    @typing.overload
    def __imul__(self, arg0: float) -> Vec4i: ...
    @typing.overload
    def __imul__(self, arg0: int) -> Vec4i: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, *args) -> None: ...
    @typing.overload
    def __init__(self, arg0: Vec4i) -> None: ...
    def __isub__(self, arg0: Vec4i) -> None: ...
    def __iter__(self) -> Vec4i: ...
    @typing.overload
    def __mul__(self, arg0: Vec4i) -> int: ...
    @typing.overload
    def __mul__(self, arg0: float) -> Vec4i: ...
    @typing.overload
    def __mul__(self, arg0: int) -> Vec4i: ...
    @typing.overload
    def __mul__(self, arg0: Vec4i) -> Vec4i: ...
    @typing.overload
    def __mul__(self, arg0: Vec4i) -> Vec4i: ...
    def __ne__(self, arg0: Vec4i) -> bool: ...
    def __next__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __setitem__(self, arg0: int, arg1: int) -> int: ...
    def __str__(self) -> str: ...
    def __sub__(self, arg0: Vec4i) -> Vec4i: ...
    @typing.overload
    def __truediv__(self, arg0: float) -> Vec4i: ...
    @typing.overload
    def __truediv__(self, arg0: int) -> Vec4i: ...
    def clear(self) -> None: ...
    def dot(self, arg0: Vec4i) -> int: ...
    def fill(self, r: int) -> None: ...
    def lNorm(self, l: int) -> int: ...
    def norm(self) -> int: ...
    def norm2(self) -> int: ...
    def normalize(self, threshold: int = 0) -> bool: ...
    def normalized(self) -> Vec4i: ...
    @typing.overload
    def set(self, *args) -> None: ...
    @typing.overload
    def set(self, arg0: list) -> None: ...
    def sum(self) -> int: ...
    @property
    def w(self) -> int:
        """
        :type: int
        """
    @w.setter
    def w(self, arg1: float) -> None:
        pass
    @property
    def x(self) -> int:
        """
        :type: int
        """
    @x.setter
    def x(self, arg1: float) -> None:
        pass
    @property
    def xy(self) -> tuple:
        """
        :type: tuple
        """
    @xy.setter
    def xy(self, arg1: list) -> None:
        pass
    @property
    def xyz(self) -> tuple:
        """
        :type: tuple
        """
    @xyz.setter
    def xyz(self, arg1: list) -> None:
        pass
    @property
    def xyzw(self) -> tuple:
        """
        :type: tuple
        """
    @xyzw.setter
    def xyzw(self, arg1: list) -> None:
        pass
    @property
    def y(self) -> int:
        """
        :type: int
        """
    @y.setter
    def y(self, arg1: float) -> None:
        pass
    @property
    def z(self) -> int:
        """
        :type: int
        """
    @z.setter
    def z(self, arg1: float) -> None:
        pass
    __hash__ = None
    pass
class Vec5d():
    def __add__(self, arg0: Vec5d) -> Vec5d: ...
    def __eq__(self, arg0: Vec5d) -> bool: ...
    def __getitem__(self, arg0: int) -> float: ...
    def __iadd__(self, arg0: Vec5d) -> None: ...
    @typing.overload
    def __idiv__(self, arg0: float) -> Vec5d: ...
    @typing.overload
    def __idiv__(self, arg0: int) -> Vec5d: ...
    @typing.overload
    def __imul__(self, arg0: float) -> Vec5d: ...
    @typing.overload
    def __imul__(self, arg0: int) -> Vec5d: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, *args) -> None: ...
    @typing.overload
    def __init__(self, arg0: Vec5d) -> None: ...
    def __isub__(self, arg0: Vec5d) -> None: ...
    def __iter__(self) -> Vec5d: ...
    @typing.overload
    def __mul__(self, arg0: Vec5d) -> float: ...
    @typing.overload
    def __mul__(self, arg0: float) -> Vec5d: ...
    @typing.overload
    def __mul__(self, arg0: int) -> Vec5d: ...
    @typing.overload
    def __mul__(self, arg0: Vec5d) -> Vec5d: ...
    @typing.overload
    def __mul__(self, arg0: Vec5d) -> Vec5d: ...
    def __ne__(self, arg0: Vec5d) -> bool: ...
    def __next__(self) -> float: ...
    def __repr__(self) -> str: ...
    def __setitem__(self, arg0: int, arg1: float) -> float: ...
    def __str__(self) -> str: ...
    def __sub__(self, arg0: Vec5d) -> Vec5d: ...
    @typing.overload
    def __truediv__(self, arg0: float) -> Vec5d: ...
    @typing.overload
    def __truediv__(self, arg0: int) -> Vec5d: ...
    def clear(self) -> None: ...
    def dot(self, arg0: Vec5d) -> float: ...
    def fill(self, r: float) -> None: ...
    def lNorm(self, l: int) -> float: ...
    def norm(self) -> float: ...
    def norm2(self) -> float: ...
    def normalize(self, threshold: float = 2.220446049250313e-16) -> bool: ...
    def normalized(self) -> Vec5d: ...
    @typing.overload
    def set(self, *args) -> None: ...
    @typing.overload
    def set(self, arg0: list) -> None: ...
    def sum(self) -> float: ...
    @property
    def w(self) -> float:
        """
        :type: float
        """
    @w.setter
    def w(self, arg1: float) -> None:
        pass
    @property
    def x(self) -> float:
        """
        :type: float
        """
    @x.setter
    def x(self, arg1: float) -> None:
        pass
    @property
    def xy(self) -> tuple:
        """
        :type: tuple
        """
    @xy.setter
    def xy(self, arg1: list) -> None:
        pass
    @property
    def xyz(self) -> tuple:
        """
        :type: tuple
        """
    @xyz.setter
    def xyz(self, arg1: list) -> None:
        pass
    @property
    def xyzw(self) -> tuple:
        """
        :type: tuple
        """
    @xyzw.setter
    def xyzw(self, arg1: list) -> None:
        pass
    @property
    def y(self) -> float:
        """
        :type: float
        """
    @y.setter
    def y(self, arg1: float) -> None:
        pass
    @property
    def z(self) -> float:
        """
        :type: float
        """
    @z.setter
    def z(self, arg1: float) -> None:
        pass
    __hash__ = None
    pass
class Vec5i():
    def __add__(self, arg0: Vec5i) -> Vec5i: ...
    def __eq__(self, arg0: Vec5i) -> bool: ...
    def __getitem__(self, arg0: int) -> int: ...
    def __iadd__(self, arg0: Vec5i) -> None: ...
    @typing.overload
    def __idiv__(self, arg0: float) -> Vec5i: ...
    @typing.overload
    def __idiv__(self, arg0: int) -> Vec5i: ...
    @typing.overload
    def __imul__(self, arg0: float) -> Vec5i: ...
    @typing.overload
    def __imul__(self, arg0: int) -> Vec5i: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, *args) -> None: ...
    @typing.overload
    def __init__(self, arg0: Vec5i) -> None: ...
    def __isub__(self, arg0: Vec5i) -> None: ...
    def __iter__(self) -> Vec5i: ...
    @typing.overload
    def __mul__(self, arg0: Vec5i) -> int: ...
    @typing.overload
    def __mul__(self, arg0: float) -> Vec5i: ...
    @typing.overload
    def __mul__(self, arg0: int) -> Vec5i: ...
    @typing.overload
    def __mul__(self, arg0: Vec5i) -> Vec5i: ...
    @typing.overload
    def __mul__(self, arg0: Vec5i) -> Vec5i: ...
    def __ne__(self, arg0: Vec5i) -> bool: ...
    def __next__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __setitem__(self, arg0: int, arg1: int) -> int: ...
    def __str__(self) -> str: ...
    def __sub__(self, arg0: Vec5i) -> Vec5i: ...
    @typing.overload
    def __truediv__(self, arg0: float) -> Vec5i: ...
    @typing.overload
    def __truediv__(self, arg0: int) -> Vec5i: ...
    def clear(self) -> None: ...
    def dot(self, arg0: Vec5i) -> int: ...
    def fill(self, r: int) -> None: ...
    def lNorm(self, l: int) -> int: ...
    def norm(self) -> int: ...
    def norm2(self) -> int: ...
    def normalize(self, threshold: int = 0) -> bool: ...
    def normalized(self) -> Vec5i: ...
    @typing.overload
    def set(self, *args) -> None: ...
    @typing.overload
    def set(self, arg0: list) -> None: ...
    def sum(self) -> int: ...
    @property
    def w(self) -> int:
        """
        :type: int
        """
    @w.setter
    def w(self, arg1: float) -> None:
        pass
    @property
    def x(self) -> int:
        """
        :type: int
        """
    @x.setter
    def x(self, arg1: float) -> None:
        pass
    @property
    def xy(self) -> tuple:
        """
        :type: tuple
        """
    @xy.setter
    def xy(self, arg1: list) -> None:
        pass
    @property
    def xyz(self) -> tuple:
        """
        :type: tuple
        """
    @xyz.setter
    def xyz(self, arg1: list) -> None:
        pass
    @property
    def xyzw(self) -> tuple:
        """
        :type: tuple
        """
    @xyzw.setter
    def xyzw(self, arg1: list) -> None:
        pass
    @property
    def y(self) -> int:
        """
        :type: int
        """
    @y.setter
    def y(self, arg1: float) -> None:
        pass
    @property
    def z(self) -> int:
        """
        :type: int
        """
    @z.setter
    def z(self, arg1: float) -> None:
        pass
    __hash__ = None
    pass
class Vec6d():
    def __add__(self, arg0: Vec6d) -> Vec6d: ...
    def __eq__(self, arg0: Vec6d) -> bool: ...
    def __getitem__(self, arg0: int) -> float: ...
    def __iadd__(self, arg0: Vec6d) -> None: ...
    @typing.overload
    def __idiv__(self, arg0: float) -> Vec6d: ...
    @typing.overload
    def __idiv__(self, arg0: int) -> Vec6d: ...
    @typing.overload
    def __imul__(self, arg0: float) -> Vec6d: ...
    @typing.overload
    def __imul__(self, arg0: int) -> Vec6d: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, *args) -> None: ...
    @typing.overload
    def __init__(self, arg0: Vec6d) -> None: ...
    def __isub__(self, arg0: Vec6d) -> None: ...
    def __iter__(self) -> Vec6d: ...
    @typing.overload
    def __mul__(self, arg0: Vec6d) -> float: ...
    @typing.overload
    def __mul__(self, arg0: float) -> Vec6d: ...
    @typing.overload
    def __mul__(self, arg0: int) -> Vec6d: ...
    @typing.overload
    def __mul__(self, arg0: Vec6d) -> Vec6d: ...
    @typing.overload
    def __mul__(self, arg0: Vec6d) -> Vec6d: ...
    def __ne__(self, arg0: Vec6d) -> bool: ...
    def __next__(self) -> float: ...
    def __repr__(self) -> str: ...
    def __setitem__(self, arg0: int, arg1: float) -> float: ...
    def __str__(self) -> str: ...
    def __sub__(self, arg0: Vec6d) -> Vec6d: ...
    @typing.overload
    def __truediv__(self, arg0: float) -> Vec6d: ...
    @typing.overload
    def __truediv__(self, arg0: int) -> Vec6d: ...
    def clear(self) -> None: ...
    def dot(self, arg0: Vec6d) -> float: ...
    def fill(self, r: float) -> None: ...
    def lNorm(self, l: int) -> float: ...
    def norm(self) -> float: ...
    def norm2(self) -> float: ...
    def normalize(self, threshold: float = 2.220446049250313e-16) -> bool: ...
    def normalized(self) -> Vec6d: ...
    @typing.overload
    def set(self, *args) -> None: ...
    @typing.overload
    def set(self, arg0: list) -> None: ...
    def sum(self) -> float: ...
    @property
    def w(self) -> float:
        """
        :type: float
        """
    @w.setter
    def w(self, arg1: float) -> None:
        pass
    @property
    def x(self) -> float:
        """
        :type: float
        """
    @x.setter
    def x(self, arg1: float) -> None:
        pass
    @property
    def xy(self) -> tuple:
        """
        :type: tuple
        """
    @xy.setter
    def xy(self, arg1: list) -> None:
        pass
    @property
    def xyz(self) -> tuple:
        """
        :type: tuple
        """
    @xyz.setter
    def xyz(self, arg1: list) -> None:
        pass
    @property
    def xyzw(self) -> tuple:
        """
        :type: tuple
        """
    @xyzw.setter
    def xyzw(self, arg1: list) -> None:
        pass
    @property
    def y(self) -> float:
        """
        :type: float
        """
    @y.setter
    def y(self, arg1: float) -> None:
        pass
    @property
    def z(self) -> float:
        """
        :type: float
        """
    @z.setter
    def z(self, arg1: float) -> None:
        pass
    __hash__ = None
    pass
class Vec6i():
    def __add__(self, arg0: Vec6i) -> Vec6i: ...
    def __eq__(self, arg0: Vec6i) -> bool: ...
    def __getitem__(self, arg0: int) -> int: ...
    def __iadd__(self, arg0: Vec6i) -> None: ...
    @typing.overload
    def __idiv__(self, arg0: float) -> Vec6i: ...
    @typing.overload
    def __idiv__(self, arg0: int) -> Vec6i: ...
    @typing.overload
    def __imul__(self, arg0: float) -> Vec6i: ...
    @typing.overload
    def __imul__(self, arg0: int) -> Vec6i: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, *args) -> None: ...
    @typing.overload
    def __init__(self, arg0: Vec6i) -> None: ...
    def __isub__(self, arg0: Vec6i) -> None: ...
    def __iter__(self) -> Vec6i: ...
    @typing.overload
    def __mul__(self, arg0: Vec6i) -> int: ...
    @typing.overload
    def __mul__(self, arg0: float) -> Vec6i: ...
    @typing.overload
    def __mul__(self, arg0: int) -> Vec6i: ...
    @typing.overload
    def __mul__(self, arg0: Vec6i) -> Vec6i: ...
    @typing.overload
    def __mul__(self, arg0: Vec6i) -> Vec6i: ...
    def __ne__(self, arg0: Vec6i) -> bool: ...
    def __next__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __setitem__(self, arg0: int, arg1: int) -> int: ...
    def __str__(self) -> str: ...
    def __sub__(self, arg0: Vec6i) -> Vec6i: ...
    @typing.overload
    def __truediv__(self, arg0: float) -> Vec6i: ...
    @typing.overload
    def __truediv__(self, arg0: int) -> Vec6i: ...
    def clear(self) -> None: ...
    def dot(self, arg0: Vec6i) -> int: ...
    def fill(self, r: int) -> None: ...
    def lNorm(self, l: int) -> int: ...
    def norm(self) -> int: ...
    def norm2(self) -> int: ...
    def normalize(self, threshold: int = 0) -> bool: ...
    def normalized(self) -> Vec6i: ...
    @typing.overload
    def set(self, *args) -> None: ...
    @typing.overload
    def set(self, arg0: list) -> None: ...
    def sum(self) -> int: ...
    @property
    def w(self) -> int:
        """
        :type: int
        """
    @w.setter
    def w(self, arg1: float) -> None:
        pass
    @property
    def x(self) -> int:
        """
        :type: int
        """
    @x.setter
    def x(self, arg1: float) -> None:
        pass
    @property
    def xy(self) -> tuple:
        """
        :type: tuple
        """
    @xy.setter
    def xy(self, arg1: list) -> None:
        pass
    @property
    def xyz(self) -> tuple:
        """
        :type: tuple
        """
    @xyz.setter
    def xyz(self, arg1: list) -> None:
        pass
    @property
    def xyzw(self) -> tuple:
        """
        :type: tuple
        """
    @xyzw.setter
    def xyzw(self, arg1: list) -> None:
        pass
    @property
    def y(self) -> int:
        """
        :type: int
        """
    @y.setter
    def y(self, arg1: float) -> None:
        pass
    @property
    def z(self) -> int:
        """
        :type: int
        """
    @z.setter
    def z(self, arg1: float) -> None:
        pass
    __hash__ = None
    pass
class Vec7d():
    def __add__(self, arg0: Vec7d) -> Vec7d: ...
    def __eq__(self, arg0: Vec7d) -> bool: ...
    def __getitem__(self, arg0: int) -> float: ...
    def __iadd__(self, arg0: Vec7d) -> None: ...
    @typing.overload
    def __idiv__(self, arg0: float) -> Vec7d: ...
    @typing.overload
    def __idiv__(self, arg0: int) -> Vec7d: ...
    @typing.overload
    def __imul__(self, arg0: float) -> Vec7d: ...
    @typing.overload
    def __imul__(self, arg0: int) -> Vec7d: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, *args) -> None: ...
    @typing.overload
    def __init__(self, arg0: Vec7d) -> None: ...
    def __isub__(self, arg0: Vec7d) -> None: ...
    def __iter__(self) -> Vec7d: ...
    @typing.overload
    def __mul__(self, arg0: Vec7d) -> float: ...
    @typing.overload
    def __mul__(self, arg0: float) -> Vec7d: ...
    @typing.overload
    def __mul__(self, arg0: int) -> Vec7d: ...
    @typing.overload
    def __mul__(self, arg0: Vec7d) -> Vec7d: ...
    @typing.overload
    def __mul__(self, arg0: Vec7d) -> Vec7d: ...
    def __ne__(self, arg0: Vec7d) -> bool: ...
    def __next__(self) -> float: ...
    def __repr__(self) -> str: ...
    def __setitem__(self, arg0: int, arg1: float) -> float: ...
    def __str__(self) -> str: ...
    def __sub__(self, arg0: Vec7d) -> Vec7d: ...
    @typing.overload
    def __truediv__(self, arg0: float) -> Vec7d: ...
    @typing.overload
    def __truediv__(self, arg0: int) -> Vec7d: ...
    def clear(self) -> None: ...
    def dot(self, arg0: Vec7d) -> float: ...
    def fill(self, r: float) -> None: ...
    def lNorm(self, l: int) -> float: ...
    def norm(self) -> float: ...
    def norm2(self) -> float: ...
    def normalize(self, threshold: float = 2.220446049250313e-16) -> bool: ...
    def normalized(self) -> Vec7d: ...
    @typing.overload
    def set(self, *args) -> None: ...
    @typing.overload
    def set(self, arg0: list) -> None: ...
    def sum(self) -> float: ...
    @property
    def w(self) -> float:
        """
        :type: float
        """
    @w.setter
    def w(self, arg1: float) -> None:
        pass
    @property
    def x(self) -> float:
        """
        :type: float
        """
    @x.setter
    def x(self, arg1: float) -> None:
        pass
    @property
    def xy(self) -> tuple:
        """
        :type: tuple
        """
    @xy.setter
    def xy(self, arg1: list) -> None:
        pass
    @property
    def xyz(self) -> tuple:
        """
        :type: tuple
        """
    @xyz.setter
    def xyz(self, arg1: list) -> None:
        pass
    @property
    def xyzw(self) -> tuple:
        """
        :type: tuple
        """
    @xyzw.setter
    def xyzw(self, arg1: list) -> None:
        pass
    @property
    def y(self) -> float:
        """
        :type: float
        """
    @y.setter
    def y(self, arg1: float) -> None:
        pass
    @property
    def z(self) -> float:
        """
        :type: float
        """
    @z.setter
    def z(self, arg1: float) -> None:
        pass
    __hash__ = None
    pass
class Vec7i():
    def __add__(self, arg0: Vec7i) -> Vec7i: ...
    def __eq__(self, arg0: Vec7i) -> bool: ...
    def __getitem__(self, arg0: int) -> int: ...
    def __iadd__(self, arg0: Vec7i) -> None: ...
    @typing.overload
    def __idiv__(self, arg0: float) -> Vec7i: ...
    @typing.overload
    def __idiv__(self, arg0: int) -> Vec7i: ...
    @typing.overload
    def __imul__(self, arg0: float) -> Vec7i: ...
    @typing.overload
    def __imul__(self, arg0: int) -> Vec7i: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, *args) -> None: ...
    @typing.overload
    def __init__(self, arg0: Vec7i) -> None: ...
    def __isub__(self, arg0: Vec7i) -> None: ...
    def __iter__(self) -> Vec7i: ...
    @typing.overload
    def __mul__(self, arg0: Vec7i) -> int: ...
    @typing.overload
    def __mul__(self, arg0: float) -> Vec7i: ...
    @typing.overload
    def __mul__(self, arg0: int) -> Vec7i: ...
    @typing.overload
    def __mul__(self, arg0: Vec7i) -> Vec7i: ...
    @typing.overload
    def __mul__(self, arg0: Vec7i) -> Vec7i: ...
    def __ne__(self, arg0: Vec7i) -> bool: ...
    def __next__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __setitem__(self, arg0: int, arg1: int) -> int: ...
    def __str__(self) -> str: ...
    def __sub__(self, arg0: Vec7i) -> Vec7i: ...
    @typing.overload
    def __truediv__(self, arg0: float) -> Vec7i: ...
    @typing.overload
    def __truediv__(self, arg0: int) -> Vec7i: ...
    def clear(self) -> None: ...
    def dot(self, arg0: Vec7i) -> int: ...
    def fill(self, r: int) -> None: ...
    def lNorm(self, l: int) -> int: ...
    def norm(self) -> int: ...
    def norm2(self) -> int: ...
    def normalize(self, threshold: int = 0) -> bool: ...
    def normalized(self) -> Vec7i: ...
    @typing.overload
    def set(self, *args) -> None: ...
    @typing.overload
    def set(self, arg0: list) -> None: ...
    def sum(self) -> int: ...
    @property
    def w(self) -> int:
        """
        :type: int
        """
    @w.setter
    def w(self, arg1: float) -> None:
        pass
    @property
    def x(self) -> int:
        """
        :type: int
        """
    @x.setter
    def x(self, arg1: float) -> None:
        pass
    @property
    def xy(self) -> tuple:
        """
        :type: tuple
        """
    @xy.setter
    def xy(self, arg1: list) -> None:
        pass
    @property
    def xyz(self) -> tuple:
        """
        :type: tuple
        """
    @xyz.setter
    def xyz(self, arg1: list) -> None:
        pass
    @property
    def xyzw(self) -> tuple:
        """
        :type: tuple
        """
    @xyzw.setter
    def xyzw(self, arg1: list) -> None:
        pass
    @property
    def y(self) -> int:
        """
        :type: int
        """
    @y.setter
    def y(self, arg1: float) -> None:
        pass
    @property
    def z(self) -> int:
        """
        :type: int
        """
    @z.setter
    def z(self, arg1: float) -> None:
        pass
    __hash__ = None
    pass
class Vec8d():
    def __add__(self, arg0: Vec8d) -> Vec8d: ...
    def __eq__(self, arg0: Vec8d) -> bool: ...
    def __getitem__(self, arg0: int) -> float: ...
    def __iadd__(self, arg0: Vec8d) -> None: ...
    @typing.overload
    def __idiv__(self, arg0: float) -> Vec8d: ...
    @typing.overload
    def __idiv__(self, arg0: int) -> Vec8d: ...
    @typing.overload
    def __imul__(self, arg0: float) -> Vec8d: ...
    @typing.overload
    def __imul__(self, arg0: int) -> Vec8d: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, *args) -> None: ...
    @typing.overload
    def __init__(self, arg0: Vec8d) -> None: ...
    def __isub__(self, arg0: Vec8d) -> None: ...
    def __iter__(self) -> Vec8d: ...
    @typing.overload
    def __mul__(self, arg0: Vec8d) -> float: ...
    @typing.overload
    def __mul__(self, arg0: float) -> Vec8d: ...
    @typing.overload
    def __mul__(self, arg0: int) -> Vec8d: ...
    @typing.overload
    def __mul__(self, arg0: Vec8d) -> Vec8d: ...
    @typing.overload
    def __mul__(self, arg0: Vec8d) -> Vec8d: ...
    def __ne__(self, arg0: Vec8d) -> bool: ...
    def __next__(self) -> float: ...
    def __repr__(self) -> str: ...
    def __setitem__(self, arg0: int, arg1: float) -> float: ...
    def __str__(self) -> str: ...
    def __sub__(self, arg0: Vec8d) -> Vec8d: ...
    @typing.overload
    def __truediv__(self, arg0: float) -> Vec8d: ...
    @typing.overload
    def __truediv__(self, arg0: int) -> Vec8d: ...
    def clear(self) -> None: ...
    def dot(self, arg0: Vec8d) -> float: ...
    def fill(self, r: float) -> None: ...
    def lNorm(self, l: int) -> float: ...
    def norm(self) -> float: ...
    def norm2(self) -> float: ...
    def normalize(self, threshold: float = 2.220446049250313e-16) -> bool: ...
    def normalized(self) -> Vec8d: ...
    @typing.overload
    def set(self, *args) -> None: ...
    @typing.overload
    def set(self, arg0: list) -> None: ...
    def sum(self) -> float: ...
    @property
    def w(self) -> float:
        """
        :type: float
        """
    @w.setter
    def w(self, arg1: float) -> None:
        pass
    @property
    def x(self) -> float:
        """
        :type: float
        """
    @x.setter
    def x(self, arg1: float) -> None:
        pass
    @property
    def xy(self) -> tuple:
        """
        :type: tuple
        """
    @xy.setter
    def xy(self, arg1: list) -> None:
        pass
    @property
    def xyz(self) -> tuple:
        """
        :type: tuple
        """
    @xyz.setter
    def xyz(self, arg1: list) -> None:
        pass
    @property
    def xyzw(self) -> tuple:
        """
        :type: tuple
        """
    @xyzw.setter
    def xyzw(self, arg1: list) -> None:
        pass
    @property
    def y(self) -> float:
        """
        :type: float
        """
    @y.setter
    def y(self, arg1: float) -> None:
        pass
    @property
    def z(self) -> float:
        """
        :type: float
        """
    @z.setter
    def z(self, arg1: float) -> None:
        pass
    __hash__ = None
    pass
class Vec8i():
    def __add__(self, arg0: Vec8i) -> Vec8i: ...
    def __eq__(self, arg0: Vec8i) -> bool: ...
    def __getitem__(self, arg0: int) -> int: ...
    def __iadd__(self, arg0: Vec8i) -> None: ...
    @typing.overload
    def __idiv__(self, arg0: float) -> Vec8i: ...
    @typing.overload
    def __idiv__(self, arg0: int) -> Vec8i: ...
    @typing.overload
    def __imul__(self, arg0: float) -> Vec8i: ...
    @typing.overload
    def __imul__(self, arg0: int) -> Vec8i: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, *args) -> None: ...
    @typing.overload
    def __init__(self, arg0: Vec8i) -> None: ...
    def __isub__(self, arg0: Vec8i) -> None: ...
    def __iter__(self) -> Vec8i: ...
    @typing.overload
    def __mul__(self, arg0: Vec8i) -> int: ...
    @typing.overload
    def __mul__(self, arg0: float) -> Vec8i: ...
    @typing.overload
    def __mul__(self, arg0: int) -> Vec8i: ...
    @typing.overload
    def __mul__(self, arg0: Vec8i) -> Vec8i: ...
    @typing.overload
    def __mul__(self, arg0: Vec8i) -> Vec8i: ...
    def __ne__(self, arg0: Vec8i) -> bool: ...
    def __next__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __setitem__(self, arg0: int, arg1: int) -> int: ...
    def __str__(self) -> str: ...
    def __sub__(self, arg0: Vec8i) -> Vec8i: ...
    @typing.overload
    def __truediv__(self, arg0: float) -> Vec8i: ...
    @typing.overload
    def __truediv__(self, arg0: int) -> Vec8i: ...
    def clear(self) -> None: ...
    def dot(self, arg0: Vec8i) -> int: ...
    def fill(self, r: int) -> None: ...
    def lNorm(self, l: int) -> int: ...
    def norm(self) -> int: ...
    def norm2(self) -> int: ...
    def normalize(self, threshold: int = 0) -> bool: ...
    def normalized(self) -> Vec8i: ...
    @typing.overload
    def set(self, *args) -> None: ...
    @typing.overload
    def set(self, arg0: list) -> None: ...
    def sum(self) -> int: ...
    @property
    def w(self) -> int:
        """
        :type: int
        """
    @w.setter
    def w(self, arg1: float) -> None:
        pass
    @property
    def x(self) -> int:
        """
        :type: int
        """
    @x.setter
    def x(self, arg1: float) -> None:
        pass
    @property
    def xy(self) -> tuple:
        """
        :type: tuple
        """
    @xy.setter
    def xy(self, arg1: list) -> None:
        pass
    @property
    def xyz(self) -> tuple:
        """
        :type: tuple
        """
    @xyz.setter
    def xyz(self, arg1: list) -> None:
        pass
    @property
    def xyzw(self) -> tuple:
        """
        :type: tuple
        """
    @xyzw.setter
    def xyzw(self, arg1: list) -> None:
        pass
    @property
    def y(self) -> int:
        """
        :type: int
        """
    @y.setter
    def y(self, arg1: float) -> None:
        pass
    @property
    def z(self) -> int:
        """
        :type: int
        """
    @z.setter
    def z(self, arg1: float) -> None:
        pass
    __hash__ = None
    pass
class Vec9d():
    def __add__(self, arg0: Vec9d) -> Vec9d: ...
    def __eq__(self, arg0: Vec9d) -> bool: ...
    def __getitem__(self, arg0: int) -> float: ...
    def __iadd__(self, arg0: Vec9d) -> None: ...
    @typing.overload
    def __idiv__(self, arg0: float) -> Vec9d: ...
    @typing.overload
    def __idiv__(self, arg0: int) -> Vec9d: ...
    @typing.overload
    def __imul__(self, arg0: float) -> Vec9d: ...
    @typing.overload
    def __imul__(self, arg0: int) -> Vec9d: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, *args) -> None: ...
    @typing.overload
    def __init__(self, arg0: Vec9d) -> None: ...
    def __isub__(self, arg0: Vec9d) -> None: ...
    def __iter__(self) -> Vec9d: ...
    @typing.overload
    def __mul__(self, arg0: Vec9d) -> float: ...
    @typing.overload
    def __mul__(self, arg0: float) -> Vec9d: ...
    @typing.overload
    def __mul__(self, arg0: int) -> Vec9d: ...
    @typing.overload
    def __mul__(self, arg0: Vec9d) -> Vec9d: ...
    @typing.overload
    def __mul__(self, arg0: Vec9d) -> Vec9d: ...
    def __ne__(self, arg0: Vec9d) -> bool: ...
    def __next__(self) -> float: ...
    def __repr__(self) -> str: ...
    def __setitem__(self, arg0: int, arg1: float) -> float: ...
    def __str__(self) -> str: ...
    def __sub__(self, arg0: Vec9d) -> Vec9d: ...
    @typing.overload
    def __truediv__(self, arg0: float) -> Vec9d: ...
    @typing.overload
    def __truediv__(self, arg0: int) -> Vec9d: ...
    def clear(self) -> None: ...
    def dot(self, arg0: Vec9d) -> float: ...
    def fill(self, r: float) -> None: ...
    def lNorm(self, l: int) -> float: ...
    def norm(self) -> float: ...
    def norm2(self) -> float: ...
    def normalize(self, threshold: float = 2.220446049250313e-16) -> bool: ...
    def normalized(self) -> Vec9d: ...
    @typing.overload
    def set(self, *args) -> None: ...
    @typing.overload
    def set(self, arg0: list) -> None: ...
    def sum(self) -> float: ...
    @property
    def w(self) -> float:
        """
        :type: float
        """
    @w.setter
    def w(self, arg1: float) -> None:
        pass
    @property
    def x(self) -> float:
        """
        :type: float
        """
    @x.setter
    def x(self, arg1: float) -> None:
        pass
    @property
    def xy(self) -> tuple:
        """
        :type: tuple
        """
    @xy.setter
    def xy(self, arg1: list) -> None:
        pass
    @property
    def xyz(self) -> tuple:
        """
        :type: tuple
        """
    @xyz.setter
    def xyz(self, arg1: list) -> None:
        pass
    @property
    def xyzw(self) -> tuple:
        """
        :type: tuple
        """
    @xyzw.setter
    def xyzw(self, arg1: list) -> None:
        pass
    @property
    def y(self) -> float:
        """
        :type: float
        """
    @y.setter
    def y(self, arg1: float) -> None:
        pass
    @property
    def z(self) -> float:
        """
        :type: float
        """
    @z.setter
    def z(self, arg1: float) -> None:
        pass
    __hash__ = None
    pass
class Vec9i():
    def __add__(self, arg0: Vec9i) -> Vec9i: ...
    def __eq__(self, arg0: Vec9i) -> bool: ...
    def __getitem__(self, arg0: int) -> int: ...
    def __iadd__(self, arg0: Vec9i) -> None: ...
    @typing.overload
    def __idiv__(self, arg0: float) -> Vec9i: ...
    @typing.overload
    def __idiv__(self, arg0: int) -> Vec9i: ...
    @typing.overload
    def __imul__(self, arg0: float) -> Vec9i: ...
    @typing.overload
    def __imul__(self, arg0: int) -> Vec9i: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, *args) -> None: ...
    @typing.overload
    def __init__(self, arg0: Vec9i) -> None: ...
    def __isub__(self, arg0: Vec9i) -> None: ...
    def __iter__(self) -> Vec9i: ...
    @typing.overload
    def __mul__(self, arg0: Vec9i) -> int: ...
    @typing.overload
    def __mul__(self, arg0: float) -> Vec9i: ...
    @typing.overload
    def __mul__(self, arg0: int) -> Vec9i: ...
    @typing.overload
    def __mul__(self, arg0: Vec9i) -> Vec9i: ...
    @typing.overload
    def __mul__(self, arg0: Vec9i) -> Vec9i: ...
    def __ne__(self, arg0: Vec9i) -> bool: ...
    def __next__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __setitem__(self, arg0: int, arg1: int) -> int: ...
    def __str__(self) -> str: ...
    def __sub__(self, arg0: Vec9i) -> Vec9i: ...
    @typing.overload
    def __truediv__(self, arg0: float) -> Vec9i: ...
    @typing.overload
    def __truediv__(self, arg0: int) -> Vec9i: ...
    def clear(self) -> None: ...
    def dot(self, arg0: Vec9i) -> int: ...
    def fill(self, r: int) -> None: ...
    def lNorm(self, l: int) -> int: ...
    def norm(self) -> int: ...
    def norm2(self) -> int: ...
    def normalize(self, threshold: int = 0) -> bool: ...
    def normalized(self) -> Vec9i: ...
    @typing.overload
    def set(self, *args) -> None: ...
    @typing.overload
    def set(self, arg0: list) -> None: ...
    def sum(self) -> int: ...
    @property
    def w(self) -> int:
        """
        :type: int
        """
    @w.setter
    def w(self, arg1: float) -> None:
        pass
    @property
    def x(self) -> int:
        """
        :type: int
        """
    @x.setter
    def x(self, arg1: float) -> None:
        pass
    @property
    def xy(self) -> tuple:
        """
        :type: tuple
        """
    @xy.setter
    def xy(self, arg1: list) -> None:
        pass
    @property
    def xyz(self) -> tuple:
        """
        :type: tuple
        """
    @xyz.setter
    def xyz(self, arg1: list) -> None:
        pass
    @property
    def xyzw(self) -> tuple:
        """
        :type: tuple
        """
    @xyzw.setter
    def xyzw(self, arg1: list) -> None:
        pass
    @property
    def y(self) -> int:
        """
        :type: int
        """
    @y.setter
    def y(self, arg1: float) -> None:
        pass
    @property
    def z(self) -> int:
        """
        :type: int
        """
    @z.setter
    def z(self, arg1: float) -> None:
        pass
    __hash__ = None
    pass
